type ChainConfig = record {
  chain_id : nat64;
  vault_manager_address : text;
  services : RpcServices;
};
type EcdsaCurve = variant { secp256k1 };
type EcdsaKeyId = record { name : text; curve : EcdsaCurve };
type EthMainnetService = variant {
  Alchemy;
  BlockPi;
  Cloudflare;
  PublicNode;
  Ankr;
};
type EthSepoliaService = variant { Alchemy; BlockPi; PublicNode; Ankr };
type HttpHeader = record { value : text; name : text };
type InitArg = record {
  ecdsa_key_id : EcdsaKeyId;
  chains : vec ChainConfig;
  client_id : text;
  client_secret : text;
};
type LockedOrder = record {
  payment_done : bool;
  base : Order;
  locked : bool;
  proof_submitted : bool;
  removed : bool;
};
type Order = record {
  id : text;
  originator : principal;
  token_address : opt text;
  fiat_amount : nat64;
  currency_symbol : text;
  onramper_address : opt text;
  chain_id : nat64;
  offramper_providers : vec PaymentProvider;
  offramper_address : text;
  onramper_provider : opt PaymentProvider;
  crypto_amount : nat64;
};
type OrderState = variant {
  Locked : LockedOrder;
  Cancelled;
  Created : Order;
  Completed;
};
type PaymentProvider = variant {
  PayPal : record { id : text };
  Revolut : record { id : text };
};
type ProviderView = record {
  cyclesPerCall : nat64;
  owner : principal;
  hostname : text;
  primary : bool;
  chainId : nat64;
  cyclesPerMessageByte : nat64;
  providerId : nat64;
};
type Result = variant { Ok : text; Err : text };
type Result_1 = variant { Ok : User; Err : text };
type Result_2 = variant { Ok : bool; Err : text };
type RpcApi = record { url : text; headers : opt vec HttpHeader };
type RpcServices = variant {
  EthSepolia : opt vec EthSepoliaService;
  Custom : record { chainId : nat64; services : vec RpcApi };
  EthMainnet : opt vec EthMainnetService;
};
type User = record {
  offramped_amount : nat64;
  evm_address : text;
  payment_providers : vec PaymentProvider;
  score : nat32;
};
service : (InitArg) -> {
  add_payment_provider : (text, PaymentProvider) -> (Result) query;
  create_order : (
      nat64,
      text,
      nat64,
      vec PaymentProvider,
      text,
      nat64,
      opt text,
    ) -> (Result);
  get_evm_address : () -> (text) query;
  get_orders : () -> (vec OrderState) query;
  get_rpc_providers : () -> (vec ProviderView) query;
  get_usd_exchange_rate : (text, text) -> (Result);
  get_user : (text) -> (Result_1) query;
  lock_order : (text, PaymentProvider, text, text) -> (Result);
  register_user : (text, vec PaymentProvider) -> (Result);
  remove_order : (text) -> (Result);
  test_check_and_approve_token : (nat64, text, nat32) -> (Result_2);
  test_deposit_funds : (nat64, nat64, opt text, opt text) -> (Result);
  verify_transaction : (text, text, text) -> (Result);
}
