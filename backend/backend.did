type ChainConfig = record {
  chain_id : nat64;
  vault_manager_address : text;
  services : RpcServices;
};
type CompletedOrder = record {
  fiat_amount : nat64;
  onramper : text;
  offramper : text;
  chain_id : nat64;
};
type EcdsaCurve = variant { secp256k1 };
type EcdsaKeyId = record { name : text; curve : EcdsaCurve };
type EthMainnetService = variant {
  Alchemy;
  BlockPi;
  Cloudflare;
  PublicNode;
  Ankr;
};
type EthSepoliaService = variant { Alchemy; BlockPi; PublicNode; Ankr };
type ExchangeRateError = variant {
  AnonymousPrincipalNotAllowed;
  CryptoQuoteAssetNotFound;
  FailedToAcceptCycles;
  ForexBaseAssetNotFound;
  CryptoBaseAssetNotFound;
  StablecoinRateTooFewRates;
  ForexAssetsNotFound;
  InconsistentRatesReceived;
  RateLimited;
  StablecoinRateZeroRate;
  Other : record { code : nat32; description : text };
  ForexInvalidTimestamp;
  NotEnoughCycles;
  ForexQuoteAssetNotFound;
  StablecoinRateNotFound;
  Pending;
};
type HttpHeader = record { value : text; name : text };
type InitArg = record {
  ecdsa_key_id : EcdsaKeyId;
  chains : vec ChainConfig;
  client_id : text;
  client_secret : text;
};
type LockedOrder = record {
  locked_at : nat64;
  payment_done : bool;
  base : Order;
  onramper_address : text;
  onramper_provider : PaymentProvider;
};
type Order = record {
  id : nat64;
  originator : principal;
  token_address : opt text;
  fiat_amount : nat64;
  currency_symbol : text;
  created_at : nat64;
  chain_id : nat64;
  offramper_providers : vec record { PaymentProviderType; text };
  offramper_address : text;
  crypto_amount : nat64;
};
type OrderFilter = variant {
  ByChainId : nat64;
  ByOfframperAddress : text;
  ByState : OrderStateFilter;
  LockedByOnramper : text;
};
type OrderState = variant {
  Locked : LockedOrder;
  Cancelled : nat64;
  Created : Order;
  Completed : CompletedOrder;
};
type OrderStateFilter = variant { Locked; Cancelled; Created; Completed };
type PaymentProvider = record {
  id : text;
  provider_type : PaymentProviderType;
};
type PaymentProviderType = variant { PayPal; Revolut };
type ProviderView = record {
  cyclesPerCall : nat64;
  owner : principal;
  hostname : text;
  primary : bool;
  chainId : nat64;
  cyclesPerMessageByte : nat64;
  providerId : nat64;
};
type RampError = variant {
  TokenAlreadyRegistered;
  InvalidAddress;
  HttpRequestError : record { nat64; text };
  TransactionTimeout;
  UserNotOfframper;
  PaymentVerificationFailed;
  InvalidInput : text;
  UserNotOnramper;
  InvalidOnramperProvider;
  UserBanned;
  ExchangeRateError : ExchangeRateError;
  TransactionFailed : text;
  ParseFloatError : text;
  OrderNotFound;
  ProviderNotInUser : PaymentProviderType;
  EthersAbiError : text;
  ChainIdNotFound : nat64;
  TokenUnregistered;
  ParseError : text;
  NonceTooLow;
  EmptyTransactionHash;
  InvalidOrderState : text;
  NonceTooHigh;
  CanisterCallError : text;
  Utf8Error;
  VaultManagerAddressNotFound : nat64;
  UserNotFound;
  InsufficientFunds;
};
type Result = variant { Ok; Err : RampError };
type Result_1 = variant { Ok : nat64; Err : RampError };
type Result_2 = variant { Ok : text; Err : RampError };
type Result_3 = variant { Ok : User; Err : RampError };
type RpcApi = record { url : text; headers : opt vec HttpHeader };
type RpcServices = variant {
  EthSepolia : opt vec EthSepoliaService;
  Custom : record { chainId : nat64; services : vec RpcApi };
  EthMainnet : opt vec EthMainnetService;
};
type User = record {
  user_type : UserType;
  evm_address : text;
  payment_providers : vec PaymentProvider;
  fiat_amount : nat64;
  score : int32;
};
type UserType = variant { Offramper; Onramper };
service : (InitArg) -> {
  add_payment_provider_for_user : (text, PaymentProvider) -> (Result);
  approve_token_allowance : (nat64, text, nat32) -> (Result);
  cancel_order : (nat64) -> (Result);
  create_order : (
      nat64,
      text,
      nat64,
      vec record { PaymentProviderType; text },
      text,
      nat64,
      opt text,
    ) -> (Result_1);
  get_evm_address : () -> (text) query;
  get_exchange_rate : (text, text) -> (Result_2);
  get_orders : (opt OrderFilter) -> (vec OrderState) query;
  get_rpc_providers : () -> (vec ProviderView) query;
  get_user : (text) -> (Result_3) query;
  lock_order : (nat64, PaymentProvider, text, opt nat32) -> (Result_2);
  register_user : (text, UserType, vec PaymentProvider) -> (Result_3);
  remove_user : (text) -> (Result_3);
  test_deposit_funds : (nat64, nat64, opt text, opt nat32) -> (Result_2);
  transfer_value : (nat64, text, nat, opt int32) -> (Result_2);
  unlock_order : (nat64, opt nat32) -> (Result_2);
  verify_transaction : (nat64, text, opt nat32) -> (Result);
}
