type AddressType = variant { EVM; ICP; Solana };
type AuthenticationData = record { signature : opt text; password : opt text };
type Block = record {
  miner : text;
  totalDifficulty : nat;
  receiptsRoot : text;
  stateRoot : text;
  hash : text;
  difficulty : nat;
  size : nat;
  uncles : vec text;
  baseFeePerGas : nat;
  extraData : text;
  transactionsRoot : opt text;
  sha3Uncles : text;
  nonce : nat;
  number : nat;
  timestamp : nat;
  transactions : vec text;
  gasLimit : nat;
  logsBloom : text;
  parentHash : text;
  gasUsed : nat;
  mixHash : text;
};
type Blockchain = variant {
  EVM : record { chain_id : nat64 };
  ICP : record { ledger_principal : principal };
  Solana;
};
type ChainConfig = record {
  currency_symbol : text;
  chain_id : nat64;
  vault_manager_address : text;
  services : RpcServices;
};
type ChainGasTracking = record {
  release_token_gas : GasUsage;
  release_native_gas : GasUsage;
  commit_gas : GasUsage;
};
type CompletedOrder = record {
  offramper_fee : nat64;
  onramper : TransactionAddress;
  offramper : TransactionAddress;
  blockchain : Blockchain;
  price : nat64;
  completed_at : nat64;
};
type Crypto = record {
  fee : nat;
  token : opt text;
  blockchain : Blockchain;
  amount : nat;
};
type EcdsaCurve = variant { secp256k1 };
type EcdsaKeyId = record { name : text; curve : EcdsaCurve };
type EthMainnetService = variant {
  Alchemy;
  BlockPi;
  Cloudflare;
  PublicNode;
  Ankr;
};
type EthSepoliaService = variant { Alchemy; BlockPi; PublicNode; Ankr };
type EvmTransactionLog = record {
  status : TransactionStatus;
  action : TransactionAction;
  order_id : nat64;
};
type ExchangeRateCache = record { rate : float64; timestamp : nat64 };
type ExchangeRateError = variant {
  AnonymousPrincipalNotAllowed;
  CryptoQuoteAssetNotFound;
  FailedToAcceptCycles;
  ForexBaseAssetNotFound;
  CryptoBaseAssetNotFound;
  StablecoinRateTooFewRates;
  ForexAssetsNotFound;
  InconsistentRatesReceived;
  RateLimited;
  StablecoinRateZeroRate;
  Other : record { code : nat32; description : text };
  ForexInvalidTimestamp;
  NotEnoughCycles;
  ForexQuoteAssetNotFound;
  StablecoinRateNotFound;
  Pending;
};
type GasRecord = record { gas : nat; block_number : nat; gas_price : nat };
type GasUsage = record { records : vec GasRecord };
type HttpHeader = record { value : text; name : text };
type HttpHeader_1 = record { value : text; name : text };
type HttpResponse = record {
  status : nat;
  body : blob;
  headers : vec HttpHeader;
};
type IcpToken = record { fee : nat; decimals : nat8; symbol : text };
type InitArg = record {
  ecdsa_key_id : EcdsaKeyId;
  revolut : RevolutConfig;
  proxy_url : text;
  chains : vec ChainConfig;
  paypal : PaypalConfig;
};
type InstallArg = variant { Upgrade : opt UpdateArg; Reinstall : InitArg };
type LockedOrder = record {
  locked_at : nat64;
  payment_done : bool;
  offramper_fee : nat64;
  base : Order;
  uncommited : bool;
  onramper : Onramper;
  price : nat64;
  payment_id : opt text;
  revolut_consent : opt RevolutConsent;
};
type LogEntry = record {
  transactionHash : opt text;
  blockNumber : opt nat;
  data : text;
  blockHash : opt text;
  transactionIndex : opt nat;
  topics : vec text;
  address : text;
  logIndex : opt nat;
  removed : bool;
};
type LoginAddress = variant {
  EVM : record { address : text };
  ICP : record { principal_id : text };
  Email : record { email : text };
  Solana : record { address : text };
};
type MethodGasUsage = variant { ReleaseToken; ReleaseNative; Commit };
type Onramper = record {
  provider : PaymentProvider;
  user_id : nat64;
  address : TransactionAddress;
};
type Order = record {
  id : nat64;
  created_at : nat64;
  offramper_user_id : nat64;
  crypto : Crypto;
  currency : text;
  offramper_providers : vec record { PaymentProviderType; PaymentProvider };
  offramper_address : TransactionAddress;
};
type OrderFilter = variant {
  ByOfframperId : nat64;
  ByOfframperAddress : TransactionAddress;
  ByState : OrderStateFilter;
  ByBlockchain : Blockchain;
  ByOnramperId : nat64;
  LockedByOnramper : TransactionAddress;
};
type OrderState = variant {
  Locked : LockedOrder;
  Cancelled : nat64;
  Created : Order;
  Completed : CompletedOrder;
};
type OrderStateFilter = variant { Locked; Cancelled; Created; Completed };
type PaymentProvider = variant {
  PayPal : record { id : text };
  Revolut : record { id : text; scheme : text; name : opt text };
};
type PaymentProviderType = variant { PayPal; Revolut };
type PaypalConfig = record {
  api_url : text;
  client_id : text;
  client_secret : text;
};
type RampError = variant {
  InvalidAddress;
  HttpRequestError : record { nat64; text };
  TransactionTimeout;
  _TransactionFailed : text;
  RpcError : text;
  UserNotOfframper;
  PaymentVerificationFailed;
  InvalidInput : text;
  UserNotOnramper;
  ICRejectionError : record { RejectionCode; text };
  InvalidOnramperProvider;
  UserBanned;
  OrderTimerNotFound;
  ExchangeRateError : ExchangeRateError;
  SignatureRequired;
  UnsupportedBlockchain;
  SessionNotFound;
  ParseFloatError : text;
  MissingDebtorAccount;
  LedgerPrincipalNotSupported : text;
  OrderNotFound;
  InvalidOfframperProvider;
  ProviderNotInUser : PaymentProviderType;
  InvalidSignature;
  MissingAccessToken;
  EthersAbiError : text;
  Pkcs8Error : text;
  OrderUncommitted;
  PasswordRequired;
  ChainIdNotFound : nat64;
  PaymentDone;
  TokenExpired;
  ParseError : text;
  NonceTooLow;
  CurrencySymbolNotFound : record {};
  TokenInvalid;
  FundsBelowFees;
  OnlyController;
  UnregisteredEvmToken;
  EmptyTransactionHash;
  InvalidOrderState : text;
  NonceTooHigh;
  RsaError : text;
  CanisterCallError : text;
  InternalError : text;
  Utf8Error;
  VaultManagerAddressNotFound : nat64;
  UserNotFound;
  UnauthorizedPrincipal;
  InvalidPassword;
  InsufficientFunds;
};
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type Result = variant { Ok; Err : RampError };
type Result_1 = variant { Ok : User; Err : RampError };
type Result_10 = variant { Ok : OrderState; Err : RampError };
type Result_11 = variant { Ok : opt EvmTransactionLog; Err : RampError };
type Result_12 = variant { Ok : ChainGasTracking; Err : RampError };
type Result_13 = variant { Ok : Block; Err : RampError };
type Result_14 = variant { Ok : vec record { text; float64 }; Err : RampError };
type Result_2 = variant { Ok : nat; Err : RampError };
type Result_3 = variant { Ok : record { nat64; nat64 }; Err : RampError };
type Result_4 = variant { Ok : text; Err : RampError };
type Result_5 = variant { Ok : nat64; Err : RampError };
type Result_6 = variant { Ok : opt record { nat; nat }; Err : RampError };
type Result_7 = variant { Ok : vec Token; Err : RampError };
type Result_8 = variant { Ok : float64; Err : RampError };
type Result_9 = variant { Ok : IcpToken; Err : RampError };
type RevolutConfig = record {
  kid : text;
  tan : text;
  api_url : text;
  proxy_url : text;
  client_id : text;
  private_key_der : blob;
};
type RevolutConsent = record { id : text; url : text };
type RpcApi = record { url : text; headers : opt vec HttpHeader_1 };
type RpcServices = variant {
  EthSepolia : opt vec EthSepoliaService;
  Custom : record { chainId : nat64; services : vec RpcApi };
  EthMainnet : opt vec EthMainnetService;
};
type Session = record { token : text; expires_at : nat64 };
type Token = record { decimals : nat8; address : text; rate_symbol : text };
type TransactionAction = variant { Release; Uncommit; Cancel; Commit };
type TransactionAddress = record { address_type : AddressType; address : text };
type TransactionReceipt = record {
  to : text;
  status : nat;
  transactionHash : text;
  blockNumber : nat;
  from : text;
  logs : vec LogEntry;
  blockHash : text;
  "type" : text;
  transactionIndex : nat;
  effectiveGasPrice : nat;
  logsBloom : text;
  contractAddress : opt text;
  gasUsed : nat;
};
type TransactionStatus = variant {
  Failed : text;
  Confirmed : TransactionReceipt;
  Pending;
};
type TransformArgs = record { context : blob; response : HttpResponse };
type UpdateArg = record {
  ecdsa_key_id : opt EcdsaKeyId;
  revolut : opt RevolutConfig;
  proxy_url : opt text;
  chains : opt vec ChainConfig;
  paypal : opt PaypalConfig;
};
type User = record {
  id : nat64;
  user_type : UserType;
  fiat_amounts : vec record { text; nat64 };
  payment_providers : vec PaymentProvider;
  score : int32;
  login : LoginAddress;
  evm_auth_message : opt text;
  addresses : vec TransactionAddress;
  session : opt Session;
  hashed_password : opt text;
};
type UserType = variant { Offramper; Onramper };
service : (InstallArg) -> {
  add_user_payment_provider : (nat64, text, PaymentProvider) -> (Result);
  add_user_transaction_address : (nat64, text, TransactionAddress) -> (Result);
  authenticate_user : (LoginAddress, opt AuthenticationData) -> (Result_1);
  calculate_order_evm_fees : (nat64, nat, opt text, nat64, nat64) -> (Result_2);
  calculate_order_price : (text, Crypto) -> (Result_3);
  cancel_order : (nat64, text) -> (Result_4);
  create_order : (
      text,
      text,
      vec record { PaymentProviderType; PaymentProvider },
      Blockchain,
      opt text,
      nat,
      TransactionAddress,
      nat64,
      opt nat64,
      opt nat64,
    ) -> (Result_5);
  execute_revolut_payment : (nat64, text) -> (Result_4) query;
  generate_evm_auth_message : (LoginAddress) -> (Result_4);
  get_average_gas_prices : (nat64, nat64, MethodGasUsage) -> (Result_6);
  get_evm_address : () -> (text) query;
  get_evm_tokens : (nat64) -> (Result_7) query;
  get_exchange_rate : (text, text) -> (Result_8);
  get_icp_token_info : (principal) -> (Result_9) query;
  get_offramper_fee : (nat64) -> (nat64) query;
  get_order : (nat64) -> (Result_10) query;
  get_orders : (opt OrderFilter, opt nat32, opt nat32) -> (
      vec OrderState,
    ) query;
  get_transaction_log : (nat64, nat64, text) -> (Result_11) query;
  get_user : (nat64) -> (Result_1) query;
  lock_order : (
      nat64,
      text,
      nat64,
      PaymentProvider,
      TransactionAddress,
      opt nat64,
    ) -> (Result_4);
  print_constants : () -> (text) query;
  refetch_user : (nat64, text) -> (Result_1) query;
  register_evm_tokens : (nat64, vec record { text; nat8; text }) -> (Result);
  register_icp_tokens : (vec text) -> (Result);
  register_user : (UserType, vec PaymentProvider, LoginAddress, opt text) -> (
      Result_1,
    );
  remove_user : (nat64) -> (Result_1);
  retry_order_completion : (nat64, opt nat64) -> (Result_4);
  test_get_consent_url : () -> (Result_4);
  test_get_evm_rates : () -> (
      vec record { record { text; text }; ExchangeRateCache },
    ) query;
  test_get_gas_tracking : (nat64) -> (Result_12) query;
  test_get_latest_block : (nat64) -> (Result_13);
  test_get_revolut_payment_details : (text) -> (Result);
  test_get_revolut_payment_token : (text) -> (Result_4);
  test_get_transaction_count : (nat64) -> (Result_2);
  test_get_transaction_status : (text, nat64) -> (TransactionStatus);
  test_paypal : () -> (Result_4);
  transfer_canister_funds : (principal, principal, nat) -> (Result);
  transfer_evm_funds : (nat64, text, nat, opt text, opt nat64) -> (Result_4);
  transform_revolut_consent_response : (TransformArgs) -> (HttpResponse) query;
  transform_revolut_payment_response : (TransformArgs) -> (HttpResponse) query;
  unlock_order : (nat64, text, opt nat64) -> (Result_4);
  update_password : (LoginAddress, opt text) -> (Result);
  verify_order_is_payable : (nat64, text) -> (Result) query;
  verify_transaction : (nat64, text, text, opt nat64) -> (Result_4);
  view_canister_balances : () -> (Result_14) query;
  withdraw_evm_fees : (nat64, nat, opt text) -> (Result_4);
}
