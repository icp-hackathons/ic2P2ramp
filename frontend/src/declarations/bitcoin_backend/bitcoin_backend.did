type BitcoinError = variant {
  ParseAmountError : text;
  InvalidInput : text;
  ParsingError : text;
  UnsupportedAddressType : text;
  CryptoError : text;
  InsufficientBalance : InsufficientBalanceError;
  VaultError : VaultError;
  TaprootError : text;
  CallRejectionError : record { RejectionCode; text };
  InternalError : text;
  TaprootNotFinalizable;
  UnsupportedRune : text;
};
type BitcoinNetwork = variant { mainnet; regtest; testnet };
type InsufficientBalanceError = record {
  fee : nat64;
  current_balance : nat64;
  transfer_amount : nat64;
};
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type Result = variant { Ok; Err : BitcoinError };
type Result_1 = variant { Ok : text; Err : BitcoinError };
type Result_2 = variant { Ok : nat64; Err : BitcoinError };
type Result_3 = variant {
  Ok : record { RuneMetadata; text };
  Err : BitcoinError;
};
type RuneMetadata = record {
  cap : nat;
  premine : nat;
  divisibility : nat8;
  symbol : text;
};
type Runes = record { decimals : nat8; symbol : text };
type SendRequest = record {
  destination_address : text;
  amount_in_satoshi : nat64;
};
type VaultError = variant {
  InsufficientBalance;
  InsufficientLockedBalance;
  AddressVaultNotFound;
};
service : (BitcoinNetwork) -> {
  cancel_deposit : (text, nat64) -> (Result);
  complete_order_and_send : (text, nat64, opt Runes, bool) -> (Result_1);
  deposit_to_address_vault : (text, nat64, opt Runes) -> (Result);
  get_balance : (text) -> (Result_2);
  get_offramper_deposits : (text) -> (Result_2) query;
  get_onramper_deposits : (text) -> (Result_2) query;
  get_p2pkh_address : () -> (Result_1);
  get_p2tr_raw_key_spend_address : () -> (Result_1);
  get_p2tr_script_spend_address : () -> (Result_1);
  get_serialized_rune_metadata : (text) -> (Result_3) query;
  lock_funds : (text, text, nat64) -> (Result);
  register_runes : (vec RuneMetadata) -> (Result);
  send_from_p2pkh : (SendRequest) -> (Result_1);
  send_ordinals_inscription : (text, text, opt text, text, nat64) -> (Result_1);
  unlock_funds : (text, text, nat64, opt Runes) -> (Result);
  validate_rune_metadata : (text) -> (Result);
}
